{"version":3,"sources":["components/AppHeader/logo.svg","components/AppHeader/AppHeader.jsx","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","styled","header","Img","img","H1","h1","AppHeader","props","src","logo","alt","Section","section","BtnBalance","button","AccountBalance","buttonText","showBalance","balance","amount","onClick","handleToggleShowBalance","Td","td","Coin","name","ticker","price","action","method","event","preventDefault","handleRefresh","Table","table","CoinList","coinData","map","key","Content","div","App","useState","setShowBalance","setCoinData","componentDidMount","a","getCoinList","response","coinIds","data","slice","coin","id","promises","getCoinPrice","Promise","all","coinPriceData","symbol","quotes","useEffect","length","axios","get","valueChangeticker","responses","values","newValues","newCoinData","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.630ef8da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from './logo.svg';\r\n\r\n\r\nconst Header = styled.header`\r\n  background-color: #282c34;\r\n  min-height: 20vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  font-size: 36px;\r\n  color: white;\r\n`;\r\n\r\nconst Img = styled.img`\r\n    height: 8rem;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 4rem;\r\n`;\r\n\r\nexport default function AppHeader(props) {\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Img src={logo} alt=\"React logo\" />\r\n        <H1>Coin Exchange</H1>\r\n      </Header>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: left;\r\n    padding: 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\nconst BtnBalance = styled.button`\r\n    font-size: 1.4rem;\r\n    margin: 1.5rem 0 1.5rem 5rem;\r\n    background-color: rgb(20, 56, 97);\r\n    color: #cccccc;\r\n    border: 1px solid #cccccc;\r\n    border-radius: 7px;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n\r\n    const buttonText = props.showBalance ?\r\n        'Hide Balance' : 'Show Balance';\r\n\r\n    let balance = props.showBalance ?\r\n        <span>Balance: ${props.amount}</span>\r\n        : null;\r\n\r\n    return (\r\n        <Section>\r\n            {balance}\r\n            <BtnBalance onClick={props.handleToggleShowBalance}>{buttonText}</BtnBalance>\r\n        </Section>\r\n    );\r\n}\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Td = styled.td` {\r\n    border: 1px solid #cccccc;\r\n    width: 25vh;\r\n}`;\r\n\r\nexport default function Coin(props) {\r\n\r\n    const handleRefresh = (event) => {\r\n        // prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.ticker);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            {props.showBalance ? <Td>{props.balance}</Td> : null}\r\n            <Td>${props.price}</Td>\r\n            <Td>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handleRefresh}>Refresh</button>\r\n                </form>\r\n            </Td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n  margin: 50px auto 50px auto;\r\n  display: inline-block;\r\n  font-size: 1.4rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n\r\n  // note: the \"key\" attribute is required to uniquely identify the <td>\r\n  return (\r\n    <>\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Ticker</th>\r\n            {props.showBalance ? <th>Balance</th> : null}\r\n            <th>Price</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            props.coinData.map(({ key, name, ticker, balance, price }) =>\r\n              <Coin key={key}\r\n                handleRefresh={props.handleRefresh}\r\n                name={name}\r\n                ticker={ticker}\r\n                balance={balance}\r\n                showBalance={props.showBalance}\r\n                price={price} />)\r\n          }\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport AppHeader from './components/AppHeader/AppHeader';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\n\nconst Content = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56, 97);\n  color: #cccccc\n`;\n\nconst COIN_COUNT = 10;\nconst API_BASE_URL = 'https://api.coinpaprika.com/v1';\n\nfunction App(props) {\n\n  // state using hooks\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await getCoinList();\n    const coinIds = response.data\n      .slice(0, COIN_COUNT)\n      .map(coin => coin.id);\n\n    // retrieve the prices\n    const promises = coinIds.map(id => getCoinPrice(id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(response => {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: coin.quotes['USD'].price\n      }\n    });\n    setCoinData(coinPriceData);\n  };\n\n  // useEffect can't return a promise or will get errors\n  useEffect(function() {\n    if (coinData.length === 0) {\n      componentDidMount();\n    } else {\n      // component did update\n    }\n  })\n\n  const getCoinList = () => {\n    return axios.get(`${API_BASE_URL}/coins`);\n  }\n\n  const getCoinPrice = (id) => {\n    return axios.get(`${API_BASE_URL}/tickers/${id}`);\n  }\n\n  // using arrow functions for event handlers allows us\n  // to get rid of the explicit event bindings\n\n  const handleRefresh = async (valueChangeticker) => {\n    // generate the new state by cloning the old state\n    // and updating the target coin price\n    const responses = coinData.map(async values => {\n      let newValues = { ...values }; // shallow copy      \n      if (values.ticker === valueChangeticker) {\n        const response = await getCoinPrice(values.key);\n        newValues.price = response.data.quotes['USD'].price;\n      }\n      return newValues;\n    });\n    const newCoinData = await Promise.all(responses);\n\n    setCoinData(newCoinData);\n  }\n\n  const handleToggleShowBalance = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  return (\n    <Content>\n      <AppHeader />\n      <AccountBalance amount={balance}\n        showBalance={showBalance}\n        handleToggleShowBalance={handleToggleShowBalance} />\n      <CoinList coinData={coinData}\n        handleRefresh={handleRefresh}\n        showBalance={showBalance} />\n    </Content>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}